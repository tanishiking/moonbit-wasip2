// Generated by `wit-bindgen` 0.35.0. DO NOT EDIT!

pub type Pollable Int derive(Show, Eq)

/// Drops a resource handle.
pub fn Pollable::drop(self : Pollable) -> Unit {
      let Pollable(resource) = self
      wasmImportResourceDropPollable(resource)
}

pub fn Pollable::ready(self : Pollable) -> Bool {

      let Pollable(handle) = self
      let result : Int =  wasmImportMethodPollableReady(handle);
      return (result != 0)

}

pub fn Pollable::block(self : Pollable) -> Unit {

      let Pollable(handle) = self
      wasmImportMethodPollableBlock(handle);

}

pub fn poll(in_ : Array[Pollable]) -> FixedArray[UInt] {

      let address = @ffi.malloc((in_).length() * 4);
      for index = 0; index < (in_).length(); index = index + 1 {
            let element : Pollable = (in_)[(index)]
            let base = address + (index * 4);

            let Pollable(handle) = element
            @ffi.store32((base) + 0, handle)

      }
      let return_area = @ffi.malloc(8)
      wasmImportPoll(address, (in_).length(), return_area);

      ignore(@ffi.load32((return_area) + 4))
      let result = @ffi.ptr2uint_array(@ffi.load32((return_area) + 0))
      @ffi.free(address)
      @ffi.free(return_area)
      return result

}

